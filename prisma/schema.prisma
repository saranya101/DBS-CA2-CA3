generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model favouritelistitems {
  listItemId     Int            @id @default(autoincrement()) @map("list_item_id")
  listId         Int            @map("list_id")
  productId      Int            @map("product_id")
  addedAt        DateTime?      @default(now()) @map("added_at") @db.Timestamp(6)
  favouritelists favouritelists @relation(fields: [listId], references: [listId], onDelete: Cascade, onUpdate: NoAction)
  product        product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([listId, productId])
}

model favouritelists {
  listId             Int                  @id @default(autoincrement()) @map("list_id")
  memberId           Int                  @map("member_id")
  listName           String               @map("list_name") @db.VarChar(255)
  createdAt          DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?            @default(now()) @map("updated_at") @db.Timestamp(6)
  favouritelistitems favouritelistitems[]
  member             member               @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction, name: "MemberToFavouriteLists")
}

model member {
  id                   Int              @id @default(autoincrement())
  username             String           @unique @db.VarChar(50)
  email                String           @unique @db.VarChar(50)
  dob                  DateTime         @db.Date
  password             String           @db.VarChar(255)
  role                 Int
  gender               String           @db.Char(1)
  lastLoginOn          DateTime?        @default(now()) @map("last_login_on") @db.Timestamp(6)
  clv                  Decimal?         @db.Decimal(10, 3)
  runningTotalSpending Decimal?         @map("running_total_spending") @db.Decimal(10, 3)
  favouritelists       favouritelists[] @relation(name: "MemberToFavouriteLists")
  memberRole           memberRole       @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_member_role_id")
  reviews              reviews[]
  saleOrder            saleOrder[]
  cartItem             cartItem[]
  usedDiscounts        UsedDiscount[]
}

model memberRole {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(25)
  member member[]

  @@map("member_role")
}

model product {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(255)
  description        String?
  unitPrice          Decimal              @map("unit_price") @db.Decimal
  stockQuantity      Decimal              @default(0) @map("stock_quantity") @db.Decimal
  country            String?              @db.VarChar(100)
  productType        String?              @map("product_type") @db.VarChar(50)
  imageUrl           String?              @default("/images/product.png") @map("image_url") @db.VarChar(255)
  manufacturedOn     DateTime?            @map("manufactured_on") @db.Timestamp(6)
  favouritelistitems favouritelistitems[]
  reviews            reviews[]
  saleOrderItem      saleOrderItem[]
  cartItem           cartItem[]
}

model reviews {
  reviewid   Int       @id @default(autoincrement())
  productid  Int
  memberid   Int
  reviewtext String
  rating     Int
  createdat  DateTime? @default(now()) @db.Timestamp(6)
  updatedat  DateTime? @default(now()) @db.Timestamp(6)
  member     member    @relation(fields: [memberid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    product   @relation(fields: [productid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([productid, memberid])
}

model saleOrder {
  id            Int             @id @default(autoincrement())
  memberId      Int?            @map("member_id")
  orderDatetime DateTime        @map("order_datetime") @db.Timestamp(6)
  status        String?         @db.VarChar(10)
  member        member?         @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_member")
  saleOrderItem saleOrderItem[]

  @@map("sale_order")
}

model saleOrderItem {
  id          Int       @id @default(autoincrement())
  saleOrderId Int       @map("sale_order_id")
  productId   Int       @map("product_id")
  quantity    Decimal   @db.Decimal
  product     product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_item_product")
  saleOrder   saleOrder @relation(fields: [saleOrderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_item_sale_order")

  @@map("sale_order_item")
}

model supplier {
  id             Int       @id @default(autoincrement())
  companyName    String    @map("company_name") @db.VarChar(255)
  descriptor     String?
  address        String?   @db.VarChar(255)
  country        String    @db.VarChar(100)
  contactEmail   String    @map("contact_email") @db.VarChar(50)
  companyUrl     String?   @map("company_url") @db.VarChar(255)
  foundedDate    DateTime? @map("founded_date") @db.Date
  staffSize      Int?      @map("staff_size")
  specialization String?   @db.VarChar(100)
  isActive       Boolean?  @map("is_active")
}

model cartItem {
  id        Int      @id @default(autoincrement()) // Primary Key for the CartItem table
  member    member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction) // Relationship with the Member table
  memberId  Int      @map("member_id") // Foreign key referencing the Member table
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction) // Relationship with the Product table
  productId Int      @map("product_id") // Foreign key referencing the Product table
  quantity  Int // Quantity of the product in the cart
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6) // Timestamp for cart item creation
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6) // Timestamp for the last update to the cart item

  @@unique([memberId, productId]) // Ensure a user cannot have duplicate products in their cart
  @@map("cart_item")
}

model Discount {
  id                Int                @id @default(autoincrement())
  code              String             @unique
  description       String?
  discountPercentage Decimal            @db.Decimal(5, 2)
  validFrom         DateTime           @db.Date
  validTo           DateTime           @db.Date
  usageLimit        Int                @default(1)
  timesUsed         Int                @default(0)
  usedDiscounts     UsedDiscount[]
}

model UsedDiscount {
  id         Int      @id @default(autoincrement())
  discount   Discount @relation(fields: [discountId], references: [id])
  discountId Int
  member     member   @relation(fields: [memberId], references: [id])
  memberId   Int
  usedOn     DateTime @default(now()) @db.Timestamp(6)
}
