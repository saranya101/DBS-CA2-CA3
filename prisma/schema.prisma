generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model favouritelistitems {
  list_item_id   Int            @id @default(autoincrement())
  list_id        Int
  product_id     Int
  added_at       DateTime?      @default(now()) @db.Timestamp(6)
  favouritelists favouritelists @relation(fields: [list_id], references: [list_id], onDelete: Cascade, onUpdate: NoAction)
  product        product        @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([list_id, product_id])
}

model favouritelists {
  list_id            Int                  @id @default(autoincrement())
  member_id          Int
  list_name          String               @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  favouritelistitems favouritelistitems[]
  member             member               @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model member {
  id                     Int              @id @default(autoincrement())
  username               String           @unique @db.VarChar(50)
  email                  String           @unique @db.VarChar(50)
  dob                    DateTime         @db.Date
  password               String           @db.VarChar(255)
  role                   Int
  gender                 String           @db.Char(1)
  last_login_on          DateTime?        @default(now()) @db.Timestamp(6)
  clv                    Decimal?         @db.Decimal(10, 3)
  running_total_spending Decimal?         @db.Decimal(10, 3)
  favouritelists         favouritelists[]
  member_role            member_role      @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_member_role_id")
  reviews                reviews[]
  sale_order             sale_order[]
    cartItem             cartItem[]
      usedProductDiscounts UsedProductDiscount[]
  usedCoupons          UsedCoupon[]
  socialMediaEngagements SocialMediaEngagement[]
   referralsMade          Referral[] @relation("ReferralReferrer")
  referralsReceived      Referral[] @relation("ReferralReferred")
  pointsBalance          PointsBalance?
  referral_code          String?           @unique @db.VarChar(50)
}


model member_role {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(25)
  member member[]
}

model product {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(255)
  description        String?
  unit_price         Decimal              @db.Decimal
  stock_quantity     Decimal              @default(0) @db.Decimal
  country            String?              @db.VarChar(100)
  product_type       String?              @db.VarChar(50)
  image_url          String?              @default("/images/product.png") @db.VarChar(255)
  manufactured_on    DateTime?            @db.Timestamp(6)
  favouritelistitems favouritelistitems[]
  reviews            reviews[]
  sale_order_item    sale_order_item[]
    cartItem             cartItem[]
      productDiscounts   ProductDiscount[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  reviewid   Int       @id @default(autoincrement())
  productid  Int
  memberid   Int
  reviewtext String
  rating     Int
  createdat  DateTime? @default(now()) @db.Timestamp(6)
  updatedat  DateTime? @default(now()) @db.Timestamp(6)
  member     member    @relation(fields: [memberid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    product   @relation(fields: [productid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([productid, memberid])
}

model sale_order {
  id              Int               @id @default(autoincrement())
  member_id       Int?
  order_datetime  DateTime          @db.Timestamp(6)
  status          String?           @db.VarChar(10)
  member          member?           @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_member")
  sale_order_item sale_order_item[]
  shippingMethod  shipping_method?  @relation(fields: [shipping_method_id], references: [id])
  shipping_method_id Int?
}

model sale_order_item {
  id            Int        @id @default(autoincrement())
  sale_order_id Int
  product_id    Int
  quantity      Decimal    @db.Decimal
  product       product    @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_item_product")
  sale_order    sale_order @relation(fields: [sale_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_order_item_sale_order")
}

model supplier {
  id             Int       @id @default(autoincrement())
  company_name   String    @db.VarChar(255)
  descriptor     String?
  address        String?   @db.VarChar(255)
  country        String    @db.VarChar(100)
  contact_email  String    @db.VarChar(50)
  company_url    String?   @db.VarChar(255)
  founded_date   DateTime? @db.Date
  staff_size     Int?
  specialization String?   @db.VarChar(100)
  is_active      Boolean?
}

model cartItem {
  id        Int      @id @default(autoincrement()) // Primary Key for the CartItem table
  member    member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction) // Relationship with the Member table
  memberId  Int      @map("member_id") // Foreign key referencing the Member table
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction) // Relationship with the Product table
  productId Int      @map("product_id") // Foreign key referencing the Product table
  quantity  Int // Quantity of the product in the cart
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6) // Timestamp for cart item creation
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6) // Timestamp for the last update to the cart item

  @@unique([memberId, productId]) // Ensure a user cannot have duplicate products in their cart
  @@map("cart_item")
}

model ProductDiscount {
  id                Int                @id @default(autoincrement())
  productId         Int
  code              String             @unique
  description       String?
  discountPercentage Decimal            @db.Decimal(5, 2)
  validFrom         DateTime           @db.Date
  validTo           DateTime           @db.Date
  usageLimit        Int                @default(1)
  timesUsed         Int                @default(0)
  product           product            @relation(fields: [productId], references: [id])
  usedDiscounts     UsedProductDiscount[]
}

model UsedProductDiscount {
  id                Int                @id @default(autoincrement())
  discountId        Int
  memberId          Int
  usedOn            DateTime           @default(now()) @db.Timestamp(6)
  productDiscount   ProductDiscount    @relation(fields: [discountId], references: [id])
  member            member             @relation(fields: [memberId], references: [id])
}

model Coupon {
  id                Int                @id @default(autoincrement())
  code              String             @unique
  description       String?
  discountPercentage Decimal            @db.Decimal(5, 2)
  minPurchaseAmount Decimal?           @db.Decimal(10, 2)
  validFrom         DateTime           @db.Date
  validTo           DateTime           @db.Date
  usageLimit        Int                @default(1)
  timesUsed         Int                @default(0)
  usedCoupons       UsedCoupon[]
}

model UsedCoupon {
  id                Int                @id @default(autoincrement())
  couponId          Int
  memberId          Int
  usedOn            DateTime           @default(now()) @db.Timestamp(6)
  coupon            Coupon             @relation(fields: [couponId], references: [id])
  member            member             @relation(fields: [memberId], references: [id])
}

model shipping_method {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(50)
  cost         Decimal  @db.Decimal(10, 2)
  deliveryTime String   @db.VarChar(50)
  sale_orders  sale_order[]
}

model SocialMediaEngagement {
  id         Int       @id @default(autoincrement())
  member_id  Int
  action     String    // e.g., 'follow', 'like', 'share'
  platform   String    // e.g., 'Facebook', 'Twitter'
  points     Int       // Points awarded for this action
  created_at DateTime  @default(now()) @db.Timestamp(6)
  member     member    @relation(fields: [member_id], references: [id], onDelete: Cascade)
}

model Referral {
  id             Int       @id @default(autoincrement())
  referrer_id    Int       // ID of the member who referred someone
  referred_id    Int       // ID of the new member who was referred
  referral_code  String    @unique
  points_awarded Int       // Points awarded to both the referrer and the referred
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  referrer       member    @relation("ReferralReferrer", fields: [referrer_id], references: [id], onDelete: Cascade)
  referred       member    @relation("ReferralReferred", fields: [referred_id], references: [id], onDelete: Cascade)
}

model PointsBalance {
  id         Int       @id @default(autoincrement())
  member_id  Int       @unique
  points     Int       @default(0)
  member     member    @relation(fields: [member_id], references: [id], onDelete: Cascade)
}